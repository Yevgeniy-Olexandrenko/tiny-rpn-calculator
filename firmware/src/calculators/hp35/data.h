#pragma once

// -----------------------------------------------------------------------------
// Text fonts
// -----------------------------------------------------------------------------

const uint8_t font5x8[] PROGMEM =
{
//	-------------------------------
	0b00100010, // 2A *
	0b00010100,
	0b00001000,
	0b00010100,
	0b00100010,
//	-------------------------------
	0b00001000, // 2B +
	0b00001000,
	0b00111110,
	0b00001000,
	0b00001000,
//	-------------------------------
	0b00010000, // 2C , (squareroot)
	0b00100000,
	0b01111111,
	0b00000001,
	0b00000001,
//	-------------------------------
	0b00001000, // 2D -
	0b00001000,
	0b00001000,
	0b00001000,
	0b00001000,
//	-------------------------------
	0b00000000, // 2E .
	0b01100000,
	0b01100000,
	0b00000000,
	0b00000000,
//	-------------------------------
	0b00100000, // 2F /
	0b00010000,
	0b00001000,
	0b00000100,
	0b00000010,
//	-------------------------------
	0b01111111, // 30 0
	0b01000001,
	0b01000001,
	0b01000001,
	0b01111111,
//	-------------------------------
	0b00000000, // 31 1
	0b00000000,
	0b00000010,
	0b01111111,
	0b00000000,
//	-------------------------------
	0b01111001, // 32 2
	0b01001001,
	0b01001001,
	0b01001001,
	0b01001111,
//	-------------------------------
	0b01000001, // 33 3
	0b01001001,
	0b01001001,
	0b01001001,
	0b01111111,
//	-------------------------------
	0b00001111, // 34 4
	0b00001000,
	0b00001000,
	0b00001000,
	0b01111111,
//	-------------------------------
	0b01001111, // 35 5
	0b01001001,
	0b01001001,
	0b01001001,
	0b01111001,
//	-------------------------------
	0b01111111, // 36 6
	0b01001001,
	0b01001001,
	0b01001001,
	0b01111001,
//	-------------------------------
	0b00000011, // 37 7
	0b00000001,
	0b00000001,
	0b00000001,
	0b01111111,
//	-------------------------------
	0b01111111, // 38 8
	0b01001001,
	0b01001001,
	0b01001001,
	0b01111111,
//	-------------------------------
	0b01001111, // 39 9
	0b01001001,
	0b01001001,
	0b01001001,
	0b01111111,
//	-------------------------------
	0b00000000, // 3A :
	0b00110110,
	0b00110110,
	0b00000000,
	0b00000000,
//	-------------------------------
	0b00000000, // 3B ; (raised x)
	0b00011011,
	0b00000100,
	0b00011011,
	0b00000000,
//	-------------------------------
	0b00000000, // 3C < (play)
	0b01111111,
	0b00111110,
	0b00011100,
	0b00001000,
//	-------------------------------
	0b00000100, // 3D = (shift sign)
	0b01111110,
	0b01111111,
	0b01111110,
	0b00000100,
//	-------------------------------
	0b00001000, // 3E > (arrow to right)
	0b00001000,
	0b00111110,
	0b00011100,
	0b00001000,
//	-------------------------------
	0b00000000, // 3F ? (raised 2)
	0b00011101,
	0b00010101,
	0b00010111,
	0b00000000,
//	-------------------------------
	0b00011100, // 40 @ (record)
	0b00111110,
	0b00111110,
	0b00111110,
	0b00011100,
//	-------------------------------
	0b01111111, // 41 A
	0b00001001,
	0b00001001,
	0b00001001,
	0b01111111,
//	-------------------------------
	0b01111111, // 42 B
	0b01001001,
	0b01001001,
	0b01001111,
	0b01111000,
//	-------------------------------
	0b01111111, // 43 C
	0b01000001,
	0b01000001,
	0b01000001,
	0b01000000,
//	-------------------------------
	0b01111111, // 44 D
	0b01000001,
	0b01000001,
	0b01000001,
	0b00111110,
//	-------------------------------
	0b01111111, // 45 E
	0b01001001,
	0b01001001,
	0b01001001,
	0b01000001,
//	-------------------------------
	0b01111111, // 46 F
	0b00001001,
	0b00001001,
	0b00001001,
	0b00000001,
//	-------------------------------
	0b01111111, // 47 G
	0b01000001,
	0b01001001,
	0b01001001,
	0b01111001,
//	-------------------------------
	0b01111111, // 48 H
	0b00001000,
	0b00001000,
	0b00001000,
	0b01111111,
//	-------------------------------
	0b00000000, // 49 I
	0b01000001,
	0b01111111,
	0b01000001,
	0b00000000,
//	-------------------------------
	0b01000000, // 4A J
	0b01000000,
	0b01000000,
	0b01000000,
	0b01111111,
//	-------------------------------
	0b01111111, // 4B K
	0b00001000,
	0b00001000,
	0b00001111,
	0b01111000,
//	-------------------------------
	0b01111111, // 4C L
	0b01000000,
	0b01000000,
	0b01000000,
	0b01000000,
//	-------------------------------
	0b01111111, // 4D M
	0b00000100,
	0b00001000,
	0b00000100,
	0b01111111,
//	-------------------------------
	0b01111111, // 4E N
	0b00000100,
	0b00001000,
	0b00010000,
	0b01111111,
//	-------------------------------
	0b01111111, // 4F O
	0b01000001,
	0b01000001,
	0b01000001,
	0b01111111,
//	-------------------------------
	0b01111111, // 50 P
	0b00001001,
	0b00001001,
	0b00001001,
	0b00001111,
//	-------------------------------
	0b01111111, // 51 Q
	0b01000001,
	0b01110001,
	0b01000001,
	0b01111111,
//	-------------------------------
	0b01111111, // 52 R
	0b00001001,
	0b00011001,
	0b00101001,
	0b01001111,
//	-------------------------------
	0b01001111, // 53 S
	0b01001001,
	0b01001001,
	0b01001001,
	0b01111000,
//	-------------------------------
	0b00000001, // 54 T
	0b00000001,
	0b01111111,
	0b00000001,
	0b00000001,
//	-------------------------------
	0b01111111, // 55 U
	0b01000000,
	0b01000000,
	0b01000000,
	0b01111111,
//	-------------------------------
	0b00011111, // 56 V
	0b00100000,
	0b01000000,
	0b00100000,
	0b00011111,
//	-------------------------------
	0b01111111, // 57 W
	0b01000000,
	0b01110000,
	0b01000000,
	0b01111111,
//	-------------------------------
	0b01100011, // 58 X
	0b00010100,
	0b00001000,
	0b00010100,
	0b01100011,
//	-------------------------------
	0b00000011, // 59 Y
	0b00000100,
	0b01111000,
	0b00000100,
	0b00000011,
//	-------------------------------
	0b01110001, // 5A Z
	0b01010001,
	0b01011101,
	0b01000101,
	0b01000111,
//	-------------------------------
};

const TXT::Font font PROGMEM =
{
	.bytesInRow  = 5,
	.rowsOfBytes = 1,
	.asciiFirst  = 0x2A,
	.asciiLast   = 0x5A,
	.bytes = font5x8
};

#define CHAR_SHIFT '='

// -----------------------------------------------------------------------------

const uint8_t digits7x32_bytes[] PROGMEM =
{
    // character '-' (0x2D)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // character '.' (0x2E)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x00,

    // character '/' (0x2F)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

    // character '0' (0x30)
    0xFC, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFC,
    0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '1' (0x31)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,

    // character '2' (0x32)
    0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFC,
    0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7F,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,

    // character '3' (0x33)
    0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFC,
    0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '4' (0x34)
    0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
    0x7F, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,

    // character '5' (0x35)
    0xFC, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00,
    0x7F, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '6' (0x36)
    0xFC, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00,
    0x7F, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '7' (0x37)
    0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFC,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,

    // character '8' (0x38)
    0xFC, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFC,
    0x7F, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7F,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '9' (0x39)
    0xFC, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFC,
    0x7F, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character ':' (0x3A)
    0x00, 0x00, 0xE0, 0xE0, 0xE0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00,
};

const TXT::Font digits7x32 PROGMEM =
{
    .bytesInRow  = 0x07,
    .rowsOfBytes = 0x04,
    .asciiFirst  = 0x2D,
    .asciiLast   = 0x3A,
    .bytes = digits7x32_bytes // 392 bytes
};

// -----------------------------------------------------------------------------

const uint8_t digits7x16_bytes[] PROGMEM =
{
    // character '-' (0x2D)
    0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // character '.' (0x2E)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00,

    // character '/' (0x2F)
    0xFE, 0x02, 0x02, 0x72, 0x72, 0xF2, 0xFE,
    0x3F, 0x20, 0x20, 0x3E, 0x3E, 0x3F, 0x3F,

    // character '0' (0x30)
    0x7C, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7C,
    0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '1' (0x31)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,

    // character '2' (0x32)
    0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7C,
    0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,

    // character '3' (0x33)
    0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7C,
    0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '4' (0x34)
    0x7C, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,

    // character '5' (0x35)
    0x7C, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00,
    0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '6' (0x36)
    0x7C, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00,
    0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '7' (0x37)
    0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,

    // character '8' (0x38)
    0x7C, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7C,
    0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character '9' (0x39)
    0x7C, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7C,
    0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F,

    // character ':' (0x3A)
    0xFE, 0x86, 0x02, 0x32, 0x32, 0x72, 0xFE,
    0x3F, 0x27, 0x27, 0x27, 0x20, 0x30, 0x3F,
};

const TXT::Font digits7x16 PROGMEM =
{
    .bytesInRow  = 0x07,
    .rowsOfBytes = 0x02,
    .asciiFirst  = 0x2D,
    .asciiLast   = 0x3A,
    .bytes = digits7x16_bytes // 196 bytes
};

// -----------------------------------------------------------------------------
// HP35 Operations (basic + extended)
// -----------------------------------------------------------------------------

#define FUNC_KEY  (HPVM::OpNONE - 1)
#define MENU_MATH (HPVM::OpNONE - 2)
#define MENU_TRIG (HPVM::OpNONE - 3)
#define TRIG_ASIN (HPVM::OpNONE - 4)
#define TRIG_ACOS (HPVM::OpNONE - 5)
#define TRIG_ATAN (HPVM::OpNONE - 6)

const uint8_t mainOps[16 + 16] PROGMEM =
{
	HPVM::OpNUM0, HPVM::OpNUM1, HPVM::OpNUM2, HPVM::OpNUM3, HPVM::OpNUM4, HPVM::OpNUM5, HPVM::OpNUM6, HPVM::OpNUM7,
	HPVM::OpNUM8, HPVM::OpNUM9, HPVM::OpDOT,  HPVM::OpPUSH, HPVM::OpCLX,  HPVM::OpCHS,  HPVM::OpEEX,  FUNC_KEY,

	HPVM::OpNONE, HPVM::OpRCL,  HPVM::OpSTO,  HPVM::OpSUB,  HPVM::OpPI,   HPVM::OpNONE, HPVM::OpMUL,  MENU_TRIG,
	HPVM::OpNONE, HPVM::OpDIV,  HPVM::OpSWAP, HPVM::OpADD,  HPVM::OpCLR,  HPVM::OpROT,  HPVM::OpNONE, MENU_MATH
};

const uint8_t mathOps[6] PROGMEM =
{
	HPVM::OpPOW, HPVM::OpSQRT, HPVM::OpINV,
	HPVM::OpLOG, HPVM::OpLN,   HPVM::OpEXP
};

const uint8_t trigOps[6] PROGMEM =
{
	HPVM::OpSIN, HPVM::OpCOS,  HPVM::OpTAN,
	TRIG_ASIN,   TRIG_ACOS,    TRIG_ATAN
};

const u08 seqASIN[] PROGMEM = { HPVM::OpARC, HPVM::OpSIN, HPVM::OpNONE };
const u08 seqACOS[] PROGMEM = { HPVM::OpARC, HPVM::OpCOS, HPVM::OpNONE };
const u08 seqATAN[] PROGMEM = { HPVM::OpARC, HPVM::OpTAN, HPVM::OpNONE };

// -----------------------------------------------------------------------------
// String arrays
// -----------------------------------------------------------------------------

const char strMonth[] PROGMEM = 
	"\03"
	"JAN" "FEB" "MAR" "APR" "MAY" "JUN"
	"JUL" "AUG" "SEP" "OCT" "NOV" "DEC";

const char strMenuMath[] PROGMEM = 
	"\05"
	" Y;  " " ?,X " " 1/X "  // X^Y, SQRT(X), 1/X
	" LOG " " LN  " " E;  "; // LOG(X), LN(X), e^X

const char strMenuTrig[] PROGMEM = 
	"\05"
	" SIN " " COS " " TAN "  // Sine, Cosine, Tangent
	" ASN " " ACS " " ATN "; // Inverse sine, Inverse cosine, Inverse tangent

// -----------------------------------------------------------------------------
// Menu structures
// -----------------------------------------------------------------------------

#define MENU_OPS_PER_LINE 3

struct Menu
{
	u08 lastIdx;
	const char * string;
	const uint8_t * opsBase;
};

const Menu menus[] PROGMEM =
{
	{ sizeof(mathOps) / MENU_OPS_PER_LINE - 1, strMenuMath, mathOps },
	{ sizeof(trigOps) / MENU_OPS_PER_LINE - 1, strMenuTrig, trigOps },
};

enum { MENU_MATH_OPS, MENU_TRIG_OPS };
