////////////////////////////////////////////////////////////////////////////////
// Compact Font 5x8 with Special Characters
////////////////////////////////////////////////////////////////////////////////

#define FONT_BEGIN '+'
#define FONT_WIDTH  5

#if FONT_IN_EEMEM
#define FONT_STORAGE EEMEM
#define FONT_READ(a) eeprom_read_byte(a)
#else
#define FONT_STORAGE PROGMEM
#define FONT_READ(a) pgm_read_byte(a)
#endif

const uint8_t font[] FONT_STORAGE =
{
	// No ascii signs below 43 ('+') to save memory (flash)

	0x00, 0x00, 0x00, 0x00, 0x00, // + space

	0b00010000, // , squareroot
	0b00100000,
	0b01111111,
	0b00000001,
	0b00000001,
	
	0x08, 0x08, 0x08, 0x08, 0x08, // -

	0b00000000, // .
	0b00000000,
	0b00000000,
	0b01100000,
	0b01100000,

	0x20, 0x10, 0x08, 0x04, 0x02, // /
	0x7f, 0x41, 0x41, 0x41, 0x7f, // 0
	0x00, 0x00, 0x02, 0x7f, 0x00, // 1
	0x79, 0x49, 0x49, 0x49, 0x4f, // 2
	0x41, 0x49, 0x49, 0x49, 0x7f, // 3
	0x0f, 0x08, 0x08, 0x08, 0x7f, // 4
	0x4f, 0x49, 0x49, 0x49, 0x79, // 5
	0x7f, 0x49, 0x49, 0x49, 0x79, // 6
	0x03, 0x01, 0x01, 0x01, 0x7f, // 7
	0x7f, 0x49, 0x49, 0x49, 0x7f, // 8
	0x4f, 0x49, 0x49, 0x49, 0x7f, // 9

	0b00000000, // :
	0b00110110,
	0b00110110,
	0b00000000,
	0b00000000,

	0x00, 0x1b, 0x04, 0x1b, 0x00, // ; raised x
	0x00, 0x7f, 0x3e, 0x1c, 0x08, // < play

	0b00000100, // = shift sign
	0b01111110,
	0b01111111,
	0b01111110,
	0b00000100,

	0x08, 0x08, 0x3e, 0x1c, 0x08, // > arrow to right
	0x00, 0x00, 0x2f, 0x00, 0x00, // ? !
	0x1c, 0x3e, 0x3e, 0x3e, 0x1c, // @ record
	0x7f, 0x09, 0x09, 0x09, 0x7f, // A
	0x7f, 0x49, 0x49, 0x4f, 0x78, // B
	0x7f, 0x41, 0x41, 0x41, 0x40, // C

	0b01111111, // D
	0b01000001,
	0b01000001,
	0b01000001,
	0b00111110,

	0x7F, 0x49, 0x49, 0x49, 0x41, // E
	0x7F, 0x09, 0x09, 0x09, 0x01, // F
	0x7f, 0x41, 0x49, 0x49, 0x79, // G
	0x7F, 0x08, 0x08, 0x08, 0x7F, // H
	0x00, 0x41, 0x7F, 0x41, 0x00, // I
	0x40, 0x40, 0x40, 0x40, 0x7f, // J
	0x7F, 0x08, 0x08, 0x0f, 0x78, // K
	0x7F, 0x40, 0x40, 0x40, 0x40, // L

	0b01111111, // M
	0b00000100,
	0b00001000,
	0b00000100,
	0b01111111,

	0b01111111, // N
	0b00000100,
	0b00001000,
	0b00010000,
	0b01111111,

	0x7f, 0x41, 0x41, 0x41, 0x7f, // O
	0x7F, 0x09, 0x09, 0x09, 0x0f, // P
	0x7f, 0x41, 0x71, 0x41, 0x7f, // Q

	0b01111111, // R
	0b00001001,
	0b00011001,
	0b00101001,
	0b01001111,

	0x4f, 0x49, 0x49, 0x49, 0x78, // S
	0x01, 0x01, 0x7F, 0x01, 0x01, // T
	0x7F, 0x40, 0x40, 0x40, 0x7F, // U

	0b00011111, // V
	0b00100000,
	0b01000000,
	0b00100000,
	0b00011111,

	0x7F, 0x40, 0x70, 0x40, 0x7F, // W

	0b01100011, // X
	0b00010100,
	0b00001000,
	0b00010100,
	0b01100011,

	0b00000011, // Y
	0b00000100,
	0b01111000,
	0b00000100,
	0b00000011,

	0x71, 0x51, 0x5d, 0x45, 0x47, // Z

	// No low case letters to save memory
	// 48 * 5 = 240s bytes
};